---
- name: Check linger status
  ansible.builtin.command:
    cmd: loginctl show-user $USER --property Linger
  changed_when: false
  register: pmm_check_user_linger

- name: Enable linger for $USER
  ansible.builtin.command:
    cmd: loginctl enable-linger $USER
  when: pmm_check_user_linger.rc == 0 and pmm_check_user_linger.stdout == 'Linger=no'

- block:
    - name: Check PATH
      ansible.builtin.set_fact:
        pmm_user_path_ok: '{{ lookup("ansible.builtin.env", "PATH") | regex_search(pmm_client_extract_base + "/pmm/bin") | string != "None" }}'

    - name: Gather facts
      ansible.builtin.setup:
        gather_subset: min
        filter: ansible_user_shell
      when: ansible_user_shell is undefined

    - name: Update PATH in .bashrc
      ansible.builtin.lineinfile:
        dest: '{{ pmm_client_home_dir }}/.bashrc'
        state: present
        line: 'export PATH="{{ pmm_client_extract_base }}/pmm/bin:$PATH"'
      ignore_errors: true
      when: (ansible_user_shell | regex_search('/bash') | string != "None") and not pmm_user_path_ok

    - name: Update PATH in .zshrc
      ansible.builtin.lineinfile:
        dest: '{{ pmm_client_home_dir }}/.zshrc'
        state: present
        insertbefore: 'export PATH'
        line: 'path=( "{{ pmm_client_extract_base }}/pmm/bin" $path )'
      ignore_errors: true
      args:
        chdir: '{{ lookup("ansible.builtin.env", "HOME") }}'
      when: (ansible_user_shell | regex_search('/zsh') | string != "None") and not pmm_user_path_ok

- name: Create ~/.config/systemd/user
  ansible.builtin.file:
    path: ~/.config/systemd/user
    state: directory
    mode: u=rwX,g=rX,o=

- name: Check for an existing service
  ansible.builtin.stat:
    path: ~/.config/systemd/user/pmm-agent.service
  register: pmm_agent_unit_file

- name: Create pmm-agent service
  ansible.builtin.template:
    src: roles/pmm/templates/systemd/client-user.service.j2
    dest: ~/.config/systemd/user/pmm-agent.service
  register: pmm_agent_service

- name: Start pmm-agent service
  ansible.builtin.systemd:
    name: pmm-agent
    scope: user
    enabled: true
    state: '{{ "restarted" if pmm_agent_unit_file.stat.exists and pmm_agent_service.changed else "started" }}'
    daemon_reload: '{{ pmm_agent_unit_file.stat.exists and pmm_agent_service.changed }}'
...
